#!/usr/bin/env python3
"""
Anki Package Generator

This script reads enriched flashcards from JSON and generates an Anki package (.apkg)
using the genanki library.
"""

# Add virtual environment to Python path
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'venv', 'lib', 'python3.12', 'site-packages'))

import json
import genanki  # type: ignore
import hashlib
from pathlib import Path

def create_note_type():
    """Create a custom note type for Designed Autogenerated RU-EN Flashcards"""
    
    # Front template (Russian word)
    front_template = """
    <div class="card">
      <div class="card-image">{{Image}}</div>
      <div class="ru-word">{{RU}}</div>
    </div>
    """
    
    # Back template (English word + details)
    back_template = """
    <div class="card">

      <div class="card-image">{{Image}}</div>

      <div class="ru-word">{{RU}}</div>
      <div class="en-word">{{EN}}</div>
      <div class="part-of-speech"><i>{{PartOfSpeech}}</i></div>
      <div class="definition">{{Definition}}</div>
      <div class="example"><em>{{Example}}</em></div>

      {{#AudioUK}}
      <div class="audio-row">
        {{AudioUK}} <span>UK</span> <span class="phonetic">[{{IPA_UK}}]</span>
      </div>
      {{/AudioUK}}

      {{#AudioUS}}
      <div class="audio-row">
        {{AudioUS}} <span>US</span> <span class="phonetic">[{{IPA_US}}]</span>
      </div>
      {{/AudioUS}}

      <div class="reverso-link">
        <span>
          <a class="reverso-link" target="_blank" href="https://context.reverso.net/translation/english-russian/{{EN}}">ðŸ”— Link to reverso</a>
        </span>
      </div>

    </div>
    """
    
    # CSS styling
    css = """
    .card {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f8f9fa;
      border-radius: 20px;
      padding: 20px;
      text-align: center;
      color: #212529;
      max-width: 600px;
      margin: auto;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }

    .card-image img {
      max-width: 500px;
      margin: 0 auto 20px;
      display: block;
    }

    .ru-word {
      font-size: 2em;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .en-word {
      font-size: 1.5em;
      font-weight: bold;
      color: #333;
    }

    .part-of-speech {
      font-style: italic;
      color: #555;
      margin: 5px 0;
    }

    .definition {
      margin: 10px 0;
      font-size: 1em;
    }

    .example {
      font-style: italic;
      color: #444;
      margin-bottom: 10px;
    }

    .audio-row {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 10px;
      margin: 8px 0;
      flex-wrap: wrap;
    }

    .audio-row span {
      font-weight:bold
    }

    .audio-row .phonetic {
      font-size: 1.1em;
      color: #666;
    }

    .replay-button {
      /* make it a perfect circle */
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: inline-flex;
      align-items: center;
      justify-content: center;

      /* pastel background + subtle shadow */
      background-color: #e9ecef;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      border: none;
      cursor: pointer;
      transition: background-color 0.2s, transform 0.2s;
    }

    .replay-button:hover,
    .replay-button:active {
      background-color: #dee2e6;
      transform: scale(1.05);
    }

    .replay-button svg {
      width: 20px;
      height: 20px;
      fill: #495057;
    }

    .reverso-link {
      margin-top: 10px;
    }

    .reverso-link a {
      font-size: 0.9em;
      color: #007bff;
      text-decoration: none;
    }

    .reverso-link a:hover {
      text-decoration: underline;
    }
    """
    
    return genanki.Model(
        1607392319,  # Random model ID
        'Designed Autogenerated RU-EN Flashcard',
        fields=[
            {'name': 'RU'},
            {'name': 'EN'},
            {'name': 'PartOfSpeech'},
            {'name': 'Definition'},
            {'name': 'Example'},
            {'name': 'IPA_UK'},
            {'name': 'IPA_US'},
            {'name': 'AudioUK'},
            {'name': 'AudioUS'},
            {'name': 'Image'},
        ],
        templates=[
            {
                'name': 'Designed Autogenerated RU-EN Flashcard',
                'qfmt': front_template,
                'afmt': back_template,
            }
        ],
        css=css
    )

def create_deck(flashcards, deck_name="Designed Autogenerated RU-EN Vocabulary"):
    """Create an Anki deck from flashcards"""
    
    # Create note type
    model = create_note_type()
    
    # Create deck
    deck = genanki.Deck(
        2059400110,  # Random deck ID
        deck_name
    )
    
    # Add notes to deck
    for flashcard in flashcards:
        # Process audio and image fields to include proper markup
        audio_uk = flashcard.get('audio_uk', '')
        audio_us = flashcard.get('audio_us', '')
        image = flashcard.get('image', '')
        
        # Add [sound:] wrapper for audio files
        audio_uk_markup = f"[sound:{audio_uk}]" if audio_uk else ""
        audio_us_markup = f"[sound:{audio_us}]" if audio_us else ""
        image_markup = f"<img src=\"{image}\">" if image else ""
        
        # Create note fields
        fields = [
            flashcard.get('russian', ''),
            flashcard.get('english', ''),
            flashcard.get('part_of_speech', ''),
            flashcard.get('definition', ''),
            flashcard.get('example', ''),
            flashcard.get('ipa_uk', ''),
            flashcard.get('ipa_us', ''),
            audio_uk_markup,
            audio_us_markup,
            image_markup,
        ]
        
        # Create note
        note = genanki.Note(
            model=model,
            fields=fields
        )
        
        deck.add_note(note)
    
    return deck

def add_media_files(deck, media_dir):
    """Add media files to the deck package"""
    media_files = {}
    
    if not os.path.exists(media_dir):
        print(f"Warning: Media directory {media_dir} does not exist")
        return media_files
    
    # Add all files from media directory
    for file_path in Path(media_dir).rglob('*'):
        if file_path.is_file():
            # Get just the filename for Anki
            filename = file_path.name
            media_files[filename] = str(file_path)
    
    return media_files

def main():
    if len(sys.argv) != 5:
        print("Usage: python make_apkg.py <json_file> <media_dir> <output_file> <deck_name>")
        sys.exit(1)
    
    json_file = sys.argv[1]
    media_dir = sys.argv[2]
    output_file = sys.argv[3]
    deck_name = sys.argv[4]
    
    # Read JSON file
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            flashcards = json.load(f)
    except FileNotFoundError:
        print(f"Error: JSON file '{json_file}' not found")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON in '{json_file}': {e}")
        sys.exit(1)
    
    print(f"Loaded {len(flashcards)} flashcards from {json_file}")
    
    # Create deck
    deck = create_deck(flashcards, deck_name)
    
    # Add media files
    media_files = add_media_files(deck, media_dir)
    print(f"Added {len(media_files)} media files")
    
    # Create package
    package = genanki.Package(deck)
    package.media_files = list(media_files.values())
    
    print(f"Media files mapping: {media_files}")
    print(f"Media files to include: {list(media_files.values())}")
    
    # Write package
    try:
        package.write_to_file(output_file)
        print(f"Successfully created Anki package: {output_file}")
    except Exception as e:
        print(f"Error creating Anki package: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 