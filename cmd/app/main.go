package main

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/commedesvlados/anki-flashcards-autogen-cli/internal/app"

	"github.com/spf13/cobra"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Version and build info - set by linker flags
var (
	Version   = "dev"
	BuildTime = "unknown"
)

var (
	excelFile    string
	outputFile   string
	mediaDir     string
	enrichedDir  string
	unsplashKey  string
	progressBar  bool
	verbose      bool
	deckName     string
	noMediaCache bool
)

var rootCmd = &cobra.Command{
	Use:     "anki-builder",
	Short:   "Anki Flashcard Builder",
	Long:    `A CLI tool that reads Russian-English word pairs from Excel, enriches them with dictionary data and images, and generates Anki packages.`,
	Version: Version,
	Run:     runMain,
}

func init() {
	rootCmd.PersistentFlags().StringVarP(&excelFile, "excel", "e", "data/words.xlsx", "Path to Excel file with word pairs")
	rootCmd.PersistentFlags().StringVarP(&outputFile, "output", "o", "output/vocab.apkg", "Output Anki package file")
	rootCmd.PersistentFlags().StringVar(&mediaDir, "media", "media", "Directory for downloaded media files")
	rootCmd.PersistentFlags().StringVar(&enrichedDir, "enriched", "enriched", "Directory for enriched JSON data")
	rootCmd.PersistentFlags().StringVar(&unsplashKey, "unsplash", "", "Unsplash API access key (or set UNSPLASH_API_KEY env var)")
	rootCmd.PersistentFlags().BoolVar(&progressBar, "progress", true, "Show progress bar during enrichment")
	rootCmd.PersistentFlags().BoolVarP(&verbose, "verbose", "v", false, "Enable verbose logging")
	rootCmd.PersistentFlags().StringVar(&deckName, "deck", "Designed Autogenerated RU-EN Vocabulary", "Name of the Anki deck")
	rootCmd.PersistentFlags().BoolVar(&noMediaCache, "no-media-cache", false, "Delete all files in media/ after .apkg is built")
	rootCmd.SetHelpTemplate(helpTemplate)
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		os.Exit(1)
	}
}

func runMain(cmd *cobra.Command, args []string) {
	if unsplashKey == "" {
		unsplashKey = os.Getenv("UNSPLASH_API_KEY")
	}
	if unsplashKey == "" {
		fmt.Fprintln(os.Stderr, "Unsplash API key is required. Use --unsplash flag or set UNSPLASH_API_KEY environment variable.")
		os.Exit(1)
	}

	logger := setupLogger(verbose)
	defer logger.Sync()

	finalOutputFile := outputFile
	if finalOutputFile == "output/vocab.apkg" {
		deckFileName := removeSpaces(deckName) + ".apkg"
		finalOutputFile = "output/" + deckFileName
	}

	dirs := []string{mediaDir, enrichedDir, filepath.Dir(finalOutputFile)}
	for _, dir := range dirs {
		if err := os.MkdirAll(dir, 0755); err != nil {
			logger.Fatal("Failed to create directory", zap.String("dir", dir), zap.Error(err))
		}
	}

	config := &app.Config{
		ExcelFile:    excelFile,
		MediaDir:     mediaDir,
		EnrichedDir:  enrichedDir,
		OutputFile:   finalOutputFile,
		UnsplashKey:  unsplashKey,
		ProgressBar:  progressBar,
		DeckName:     deckName,
		NoMediaCache: noMediaCache,
	}

	application := app.NewApp(config, logger)
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Minute)
	defer cancel()

	if err := application.Run(ctx); err != nil {
		logger.Fatal("Application failed", zap.Error(err))
	}

	logger.Info("Application completed successfully")
}

func setupLogger(verbose bool) *zap.Logger {
	var config zap.Config

	if verbose {
		config = zap.NewDevelopmentConfig()
		config.Level = zap.NewAtomicLevelAt(zap.DebugLevel)
	} else {
		config = zap.NewProductionConfig()
		config.Level = zap.NewAtomicLevelAt(zap.InfoLevel)
	}

	config.EncoderConfig.TimeKey = "timestamp"
	config.EncoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder
	config.EncoderConfig.StacktraceKey = ""

	logger, err := config.Build()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to initialize logger: %v\n", err)
		os.Exit(1)
	}

	return logger
}

func removeSpaces(s string) string {
	return strings.ReplaceAll(s, " ", "")
}

const helpTemplate = `Anki Flashcard Builder

A CLI tool that reads Russian-English word pairs from Excel, enriches them with dictionary data and images, and generates Anki packages.

Usage:
  anki-builder [flags]

Flags:
  --excel, -e string           Path to Excel file with word pairs (default "data/words.xlsx")
  --output, -o string          Output Anki package file (default "output/vocab.apkg")
  --media string               Directory for downloaded media files (default "media")
  --enriched string            Directory for enriched JSON data (default "enriched")
  --unsplash string            Unsplash API access key (or set UNSPLASH_API_KEY env var)
  --progress                   Show progress bar during enrichment (default true)
  --verbose, -v                Enable verbose logging (default false)
  --deck string                Name of the Anki deck (default "Designed Autogenerated RU-EN Vocabulary")
  --no-media-cache             Delete all files in media/ after .apkg is built (default false)
  -h, --help                   Show this help message

Excel Format:
  The Excel file should have at least 2 columns:
  - Column A: Russian words
  - Column B: English words
  - First row should be headers

Example:
  anki-builder --excel data/vocabulary.xlsx --output my_deck.apkg --unsplash YOUR_API_KEY --deck "My Vocabulary Name"

Environment Variables:
  UNSPLASH_API_KEY: Unsplash API access key (alternative to --unsplash flag)

Requirements:
  - Python 3 with genanki library installed
  - Unsplash API access key
  - Excel file with Russian-English word pairs
`
