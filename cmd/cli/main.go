package main

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
)

// Version and build info - set by linker flags
var (
	Version   = "dev"
	BuildTime = "unknown"
)

var (
	progressBar bool
	verbose     bool
)

var rootCmd = &cobra.Command{
	Use:     "anki-builder",
	Short:   "Anki Flashcard Builder",
	Long:    `A CLI tool that reads Russian-English word pairs from Excel, enriches them with dictionary data and images, and generates Anki packages.`, //nolint:lll
	Version: Version,
	Run:     runMain,
}

func registerGlobalFlags(cmd *cobra.Command) {
	cmd.PersistentFlags().BoolVar(&progressBar, "progress", true, "Show progress bar during enrichment")
	cmd.PersistentFlags().BoolVarP(&verbose, "verbose", "v", false, "Enable verbose logging")
}

func registerCommands() {
	registerGlobalFlags(rootCmd)
	rootCmd.AddCommand(NewMakeApkgCmd())
	rootCmd.AddCommand(NewExtractPdfCmd())
	rootCmd.SetHelpTemplate(helpTemplate)
}

func main() {
	registerCommands()
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		os.Exit(1)
	}
}

//nolint:revive
func runMain(cmd *cobra.Command, args []string) {
	// This function is now only for the root command, which only shows help/version.
	// The actual logic for creating the Anki package is in runMakeApkg.
}

const helpTemplate = `Anki Flashcard Builder

A CLI tool that reads Russian-English word pairs from Excel, enriches them with dictionary data and images, and generates Anki packages.

Usage:
  anki-builder [command] [flags]

Available Commands:
  make-apkg   Create a new Anki .apkg file from Excel data

Global Flags:
  --help, -h                   Show this help message
  --progress                   Show progress bar during enrichment (default true)
  --verbose, -v                Enable verbose logging (default false)

make-apkg Flags:
  --input, -i string           Path to Excel file with word pairs (default "data/words.xlsx")
  --output, -o string          Output Anki package file (default "output/vocab.apkg")
  --media string               Directory for downloaded media files (default "media")
  --enriched string            Directory for enriched JSON data (default "enriched")
  --unsplash string            Unsplash API access key (or set UNSPLASH_API_KEY env var)
  --deck string                Name of the Anki deck (default "Designed Autogenerated RU-EN Vocabulary")
  --no-media-cache             Delete all files in media/ after .apkg is built (default false)

Example:
  anki-builder make-apkg --input data/vocabulary.xlsx --output my_deck.apkg --unsplash YOUR_API_KEY --deck "My Vocabulary Name"

Environment Variables:
  UNSPLASH_API_KEY: Unsplash API access key (alternative to --unsplash flag)

Requirements:
  - Python 3 with genanki library installed
  - Unsplash API access key
  - Excel file with Russian-English word pairs
`
